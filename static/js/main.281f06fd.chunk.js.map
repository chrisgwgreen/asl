{"version":3,"sources":["utils/letters.ts","utils/mediaTemplate.ts","utils/device.ts","utils/constants.ts","hooks/useIsTabletViewport.ts","components/Button.tsx","components/Letter.tsx","assets/random.svg","App.tsx","index.tsx"],"names":["newLetter","String","fromCharCode","Math","floor","random","toLowerCase","mediaQuery","maxWidth","isTouchDevice","document","documentElement","useIsTabletViewport","useState","isTabletViewport","setIsTabletViewport","useEffect","matchMediaQuery","window","matchMedia","onWidthChange","matches","addEventListener","addListener","removeEventListener","removeListener","ButtonWrapper","styled","button","props","css","Button","children","onClick","activeElement","blur","LetterWrapper","div","isSign","isOver","language","Letter","letter","setIsOver","letterWrapper","useRef","letterElement","current","handleLetterOver","handleLetterOut","handleTouch","ref","Image","img","SignToggleWrapper","App","setLetter","setIsSign","setLanguage","handleKeyUp","e","keyCode","title","toUpperCase","src","alt","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.281f06fd.chunk.js","sourcesContent":["export const newLetter = () => {\n  return String.fromCharCode(65 + Math.floor(Math.random() * 26)).toLowerCase();\n};\n","import { TABLET_BREAKPOINT, MOBILE_BREAKPOINT } from \"./\";\n\nexport const mediaQuery = (maxWidth: number) => `(max-width: ${maxWidth}px)`;\n\nexport const media = {\n  custom: mediaQuery,\n  tablet: `@media ${mediaQuery(TABLET_BREAKPOINT)}`,\n  mobile: `@media ${mediaQuery(MOBILE_BREAKPOINT)}`,\n};\n","export const isTouchDevice = \"ontouchstart\" in document.documentElement;\n","// Breakpoints\nexport const TABLET_BREAKPOINT = 992;\nexport const MOBILE_BREAKPOINT = 600;\n","import { useState, useEffect } from \"react\";\nimport { TABLET_BREAKPOINT, mediaQuery } from \"../utils\";\n\n/*\n * Hook\n */\nexport const useIsTabletViewport = () => {\n  const [isTabletViewport, setIsTabletViewport] = useState(false);\n\n  useEffect(() => {\n    const matchMediaQuery = window.matchMedia(mediaQuery(TABLET_BREAKPOINT));\n\n    const onWidthChange = () => {\n      setIsTabletViewport(matchMediaQuery.matches);\n    };\n\n    if (matchMediaQuery.addEventListener) {\n      matchMediaQuery.addEventListener(\"change\", onWidthChange);\n    } else {\n      matchMediaQuery.addListener(onWidthChange);\n    }\n\n    onWidthChange();\n\n    return () => {\n      if (matchMediaQuery.removeEventListener) {\n        matchMediaQuery.removeEventListener(\"change\", onWidthChange);\n      } else {\n        matchMediaQuery.removeListener(onWidthChange);\n      }\n    };\n  }, []);\n\n  return isTabletViewport;\n};\n","import React, { ReactNode } from \"react\";\nimport styled, { css } from \"styled-components/macro\";\nimport { useIsTabletViewport } from \"../hooks\";\n\ninterface Props {\n  children: ReactNode;\n  onClick: () => void;\n}\n\nconst ButtonWrapper = styled.button<{ isTabletViewport: boolean }>((props) => {\n  const { isTabletViewport } = props;\n\n  return css`\n    padding: 1rem 2rem;\n    font-size: 2rem;\n    font-family: normal;\n    outline: none;\n    border: none;\n    background: #83af9b;\n    cursor: pointer;\n\n    :hover {\n      background: #c8c8a9;\n    }\n\n    ${isTabletViewport &&\n    css`\n      font-size: 1.5rem;\n    `}\n  `;\n});\n\nexport const Button = (props: Props) => {\n  const { children, onClick } = props;\n\n  const isTabletViewport = useIsTabletViewport();\n\n  const handleClick = () => {\n    onClick();\n\n    // @ts-ignore\n    document.activeElement.blur();\n  };\n\n  return (\n    <ButtonWrapper onClick={handleClick} isTabletViewport={isTabletViewport}>\n      {children}\n    </ButtonWrapper>\n  );\n};\n","import React, { useEffect, useState, useRef } from \"react\";\nimport styled, { css } from \"styled-components/macro\";\nimport { language } from \"../types\";\nimport { isTouchDevice } from \"../utils\";\n\ninterface Props {\n  letter: string;\n  isSign: boolean;\n  language: language;\n}\n\nconst LetterWrapper = styled.div<{\n  isSign: boolean;\n  isOver: boolean;\n  language: language;\n}>((props) => {\n  const { isSign, isOver, language } = props;\n\n  return css`\n    text-align: center;\n    text-transform: uppercase;\n    position: absolute;\n    top: calc(50% - 50px);\n    transform: translate(-50%, -50%);\n    left: 50%;\n    font-size: 40vh;\n\n    cursor: pointer;\n    display: block;\n\n    ${isSign &&\n    isOver &&\n    css`\n      font-family: normal;\n    `}\n\n    ${!isSign &&\n    css`\n      font-family: normal;\n    `}\n\n    ${isSign &&\n    css`\n      font-family: ${language};\n    `}\n\n    ${!isSign &&\n    isOver &&\n    css`\n      font-family: ${language};\n    `}\n\n    ${language === \"asl\" &&\n    (isSign || (!isSign && isOver)) &&\n    css`\n      font-size: 65vh;\n    `}\n\n    ${language === \"bsl\" &&\n    (isSign || (!isSign && isOver)) &&\n    css`\n      font-size: 40vh;\n    `}\n    \n    ${language === \"isl\" &&\n    (isSign || (!isSign && isOver)) &&\n    css`\n      font-size: 35vh;\n    `}\n  `;\n});\n\nexport const Letter = (props: Props) => {\n  const { letter, isSign, language } = props;\n\n  const [isOver, setIsOver] = useState(false);\n\n  const letterWrapper = useRef<HTMLDivElement>();\n\n  useEffect(() => {\n    const letterElement = letterWrapper.current;\n\n    const handleLetterOver = () => setIsOver(true);\n    const handleLetterOut = () => setIsOver(false);\n    const handleTouch = () => setIsOver(!isOver);\n\n    if (letterElement && !isTouchDevice) {\n      letterElement.addEventListener(\"mouseover\", handleLetterOver);\n      letterElement.addEventListener(\"mouseout\", handleLetterOut);\n    }\n\n    if (letterElement && isTouchDevice) {\n      letterElement.addEventListener(\"click\", handleTouch);\n    }\n\n    return () => {\n      if (letterElement && !isTouchDevice) {\n        letterElement.removeEventListener(\"mouseover\", handleLetterOver);\n        letterElement.removeEventListener(\"mouseout\", handleLetterOut);\n      }\n\n      if (letterElement && isTouchDevice) {\n        letterElement.removeEventListener(\"click\", handleTouch);\n      }\n    };\n  }, [isOver]);\n\n  return (\n    <LetterWrapper\n      isSign={isSign}\n      language={language}\n      isOver={isOver}\n      ref={(ref) => {\n        letterWrapper.current = ref as HTMLDivElement;\n      }}\n    >\n      {letter}\n    </LetterWrapper>\n  );\n};\n\n/* \n    ${!isASL &&\n    */\n","export default __webpack_public_path__ + \"static/media/random.90637106.svg\";","import React, { useState, useEffect } from \"react\";\nimport styled, { css } from \"styled-components/macro\";\nimport { newLetter } from \"./utils\";\nimport { useIsTabletViewport } from \"./hooks\";\nimport { Letter, Button } from \"./components\";\nimport { language } from \"./types\";\nimport random from \"./assets/random.svg\";\n\nconst ButtonWrapper = styled.div<{ isTabletViewport: boolean }>((props) => {\n  const { isTabletViewport } = props;\n\n  return css`\n    position: fixed;\n    bottom: 1rem;\n    left: 50%;\n    transform: translateX(-50%);\n\n    ${!isTabletViewport &&\n    css`\n      > button:nth-child(1) {\n        margin-right: 0.5rem;\n      }\n\n      > button:nth-child(2) {\n        margin-left: 0.5rem;\n      }\n    `}\n\n    ${isTabletViewport &&\n    css`\n      width: 90%;\n\n      > button:nth-child(1) {\n        width: 100%;\n        margin-bottom: 1rem;\n      }\n\n      > button:nth-child(2) {\n        width: 100%;\n      }\n    `}\n  `;\n});\n\nconst Image = styled.img`\n  width: 1.5rem;\n  height: 1.5rem;\n`;\n\nconst SignToggleWrapper = styled.div`\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n`;\n\nfunction App() {\n  const [letter, setLetter] = useState(newLetter());\n  const [isSign, setIsSign] = useState(false);\n  const [language, setLanguage] = useState<language>(\"asl\");\n\n  const isTabletViewport = useIsTabletViewport();\n\n  useEffect(() => {\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (e.keyCode === 32) {\n        setLetter(newLetter);\n      }\n    };\n\n    document.addEventListener(\"keyup\", handleKeyUp);\n\n    return () => {\n      document.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n\n  const handleToggleIsSign = () => {\n    setIsSign(!isSign);\n  };\n\n  const handleChangeLanguage = () => {\n    switch (language) {\n      case \"asl\":\n        document.title = \"BSL\";\n        setLanguage(\"bsl\");\n        break;\n      case \"bsl\":\n        document.title = \"ISL\";\n        setLanguage(\"isl\");\n        break;\n      case \"isl\":\n        document.title = \"ASL\";\n        setLanguage(\"asl\");\n        break;\n    }\n  };\n\n  const handleLetterChange = () => {\n    setLetter(newLetter);\n  };\n\n  return (\n    <>\n      <Letter letter={letter} isSign={isSign} language={language} />\n\n      <SignToggleWrapper>\n        <Button onClick={handleChangeLanguage}>{language.toUpperCase()}</Button>\n      </SignToggleWrapper>\n\n      <ButtonWrapper isTabletViewport={isTabletViewport}>\n        <Button onClick={handleToggleIsSign}>Toggle Sign/Letter</Button>\n        <Button onClick={handleLetterChange}>\n          <Image src={random} alt=\"\" />\n        </Button>\n      </ButtonWrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}